---
import { getCollection } from 'astro:content';
import { sortCategories, type Collection } from '../../util/entries';
import Post from '../../layouts/Post.astro';
import Category from '../../layouts/Category.astro';

type StaticPath = {
  params: { slug: string };
  props: Props;
};

export async function getStaticPaths() {
  const blogEntries = await getCollection('blog');
  const categories = await sortCategories(blogEntries);
  const limit = 6;

  const paths = blogEntries.map((entry) => ({
    params: { slug: entry.slug },
    props: { type: 'post', entry },
  })) as StaticPath[];

  const categoryPaths = Object.entries(categories)
    .map(([slug, entries]) =>
      Array(Math.ceil(entries.length / limit))
        .fill(0)
        .map((_, pageIndex) => {
          const pageLength = Math.ceil(entries.length / limit);
          const selectPageList = entries.slice(pageIndex * limit, (pageIndex + 1) * limit);
          return {
            params: { slug: `${slug}/${pageIndex + 1}` },
            props: { type: 'category', entries: selectPageList, slug, pageLength, pageIndex },
          };
        })
    )
    .flat() as StaticPath[];

  return paths.concat(categoryPaths);
}

type Entry = Collection[number];
export type PostProps = { type: 'post'; entry: Entry };
export type CategoryProps = { type: 'category'; slug: string; entries: Entry[]; pageLength: number; pageIndex: number };
type Props = PostProps | CategoryProps;

const { type } = Astro.props;
---

{type === 'post' ? <Post {...Astro.props} /> : <Category {...Astro.props} />}
